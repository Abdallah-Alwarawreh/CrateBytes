generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid()) @unique
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid()) @unique
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}
 
model Session {
  id           String   @id @default(cuid()) @unique
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model Project {
  id                       String  @id @default(cuid()) @unique
  name                     String  @db.VarChar(50)
  description              String? @db.VarChar(255)
  ownerId                  String
  projectKey               String  @unique
  steamPublisherKey        String? @db.VarChar(50)
  steamAppId               Int?
  owner                    User    @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  Players                  Player[]
  PlayerSession            PlayerSession[]
  Leaderboard              Leaderboard[]
}

model Player {
  id                       String  @id @default(cuid()) @unique
  playerId                 String  @unique
  guest                    Boolean

  playTime                 Int
  projectId                String
  project                  Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  lastPlayed               DateTime
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  PlayerCustomData         PlayerCustomData[]
  PlayerSession            PlayerSession[]
  LeaderboardEntry         LeaderboardEntry[]
}

model PlayerCustomData {
  id                       String  @id @default(cuid()) @unique
  playerId                 String
  projectId                String
  data                     String  @db.VarChar(255)
  player                   Player  @relation(fields: [playerId], references: [id], onDelete: Cascade)

  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  @@unique([playerId, projectId])
}

model PlayerSession {
  id           String   @id @default(cuid()) @unique
  playerId     String
  projectId    String
  startTime    DateTime @default(now())
  endTime      DateTime?
  lastHeartbeat DateTime?
  player       Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([playerId, projectId, startTime])
}

model Leaderboard {
  id           String   @id @default(cuid()) @unique
  projectId    String
  name         String
  description  String?
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  LeaderboardEntry LeaderboardEntry[]
}

model LeaderboardEntry {
  id           String   @id @default(cuid()) @unique
  playerId     String
  leaderboardId String
  score        Int
  player       Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  leaderboard  Leaderboard @relation(fields: [leaderboardId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([playerId, leaderboardId])
}

model News {
  id           String   @id @default(cuid()) @unique
  title        String
  description  String
  link         String
  image        String

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}